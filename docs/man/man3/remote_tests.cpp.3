.TH "src/tests/remote/remote_tests.cpp" 3 "Version 0.1" "shmemvv" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/tests/remote/remote_tests.cpp \- Contains OpenSHMEM remote memory access tests\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'remote_tests\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBtest_shmem_put\fP (void)"
.br
.RI "Tests the shmem_put() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_p\fP (void)"
.br
.RI "Tests the shmem_p() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_iput\fP (void)"
.br
.RI "Tests the shmem_iput() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_get\fP (void)"
.br
.RI "Tests the shmem_get() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_g\fP (void)"
.br
.RI "Tests the shmem_g() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_iget\fP (void)"
.br
.RI "Tests the shmem_iget() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_put_nbi\fP (void)"
.br
.RI "Tests the shmem_put_nbi() function\&. "
.ti -1c
.RI "bool \fBtest_shmem_get_nbi\fP (void)"
.br
.RI "Tests the shmem_get_nbi() function\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains OpenSHMEM remote memory access tests\&. 


.PP
Definition in file \fBremote_tests\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "bool test_shmem_g (void )"

.PP
Tests the shmem_g() function\&. Tests the shmem_g() routine\&.
.PP
This test verifies that the shmem_g() function correctly retrieves a single data element from PE 0 to PE 1\&.
.PP
PE 1 gets a single data element from PE 0\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB158\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
158                         {
159   static long src, dest;
160   int mype = p_shmem_my_pe();
161   int npes = p_shmem_n_pes();
162 
163   if (mype == 0) {
164     src = 10;
165   }
166 
167   p_shmem_barrier_all();
168 
169   if (mype == 1) {
170     dest = p_shmem_long_g(&src, 0);
171   }
172 
173   p_shmem_barrier_all();
174 
175   if (mype == 1) {
176     if (dest != 10) {
177       return false;
178     }
179   }
180 
181   return true;
182 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_g\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_get (void )"

.PP
Tests the shmem_get() function\&. Tests the shmem_get() routine\&.
.PP
This test verifies that the shmem_get() function correctly retrieves data from PE 0 to PE 1\&.
.PP
PE 1 gets data from an array on PE 0\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB120\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
120                           {
121   static long src[10], dest[10];
122   int mype = p_shmem_my_pe();
123   int npes = p_shmem_n_pes();
124 
125   if (mype == 0) {
126     for (int i = 0; i < 10; i++) {
127       src[i] = i;
128     }
129   }
130 
131   p_shmem_barrier_all();
132 
133   if (mype == 1) {
134     p_shmem_long_get(dest, src, 10, 0);
135   }
136 
137   p_shmem_barrier_all();
138 
139   if (mype == 1) {
140     for (int i = 0; i < 10; i++) {
141       if (dest[i] != i) {
142         return false;
143       }
144     }
145   }
146 
147   return true;
148 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_get\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_get_nbi (void )"

.PP
Tests the shmem_get_nbi() function\&. Tests the shmem_get_nbi() routine\&.
.PP
This test verifies that the shmem_get_nbi() function correctly retrieves data from PE 0 to PE 1 using non-blocking operations\&.
.PP
PE 1 gets data from an array on PE 0 using non-blocking operations\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB267\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
267                               {
268   static long src[10], dest[10];
269   int mype = p_shmem_my_pe();
270   int npes = p_shmem_n_pes();
271 
272   if (mype == 0) {
273     for (int i = 0; i < 10; i++) {
274       src[i] = i;
275     }
276   }
277 
278   p_shmem_barrier_all();
279 
280   if (mype == 1) {
281     p_shmem_long_get_nbi(dest, src, 10, 0);
282     p_shmem_quiet();
283   }
284 
285   p_shmem_barrier_all();
286 
287   if (mype == 1) {
288     for (int i = 0; i < 10; i++) {
289       if (dest[i] != i) {
290         return false;
291       }
292     }
293   }
294 
295   return true;
296 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_get_nbi\fP, \fBp_shmem_my_pe\fP, \fBp_shmem_n_pes\fP, and \fBp_shmem_quiet\fP\&.
.SS "bool test_shmem_iget (void )"

.PP
Tests the shmem_iget() function\&. Tests the shmem_iget() routine\&.
.PP
This test verifies that the shmem_iget() function correctly retrieves data from PE 0 to PE 1 using an indirect stride\&.
.PP
PE 1 gets data from an array on PE 0 using an indirect stride\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB192\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
192                            {
193   static long src[10], dest[10];
194   int mype = p_shmem_my_pe();
195   int npes = p_shmem_n_pes();
196 
197   if (mype == 0) {
198     for (int i = 0; i < 10; i++) {
199       src[i] = i;
200     }
201   }
202 
203   p_shmem_barrier_all();
204 
205   if (mype == 1) {
206     p_shmem_long_iget(dest, src, 2, 2, 5, 0);
207   }
208 
209   p_shmem_barrier_all();
210 
211   if (mype == 1) {
212     for (int i = 0; i < 10; i += 2) {
213       if (dest[i] != i / 2) {
214         return false;
215       }
216     }
217   }
218 
219   return true;
220 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_iget\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_iput (void )"

.PP
Tests the shmem_iput() function\&. Tests the shmem_iput() routine\&.
.PP
This test verifies that the shmem_iput() function correctly transfers data from PE 0 to PE 1 using an indirect stride\&.
.PP
PE 0 puts data into an array on PE 1 using an indirect stride\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB84\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
84                            {
85   static long src[10], dest[10];
86   int mype = p_shmem_my_pe();
87   int npes = p_shmem_n_pes();
88 
89   for (int i = 0; i < 10; i++) {
90     src[i] = i + mype;
91   }
92 
93   p_shmem_barrier_all();
94 
95   if (mype == 0) {
96     p_shmem_long_iput(dest, src, 2, 2, 5, 1);
97   }
98 
99   p_shmem_barrier_all();
100 
101   if (mype == 1) {
102     for (int i = 0; i < 10; i += 2) {
103       if (dest[i] != i / 2) {
104         return false;
105       }
106     }
107   }
108 
109   return true;
110 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_iput\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_p (void )"

.PP
Tests the shmem_p() function\&. Tests the shmem_p() routine\&.
.PP
This test verifies that the shmem_p() function correctly transfers a single data element from PE 0 to PE 1\&.
.PP
PE 0 puts a single data element into PE 1\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB52\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
52                         {
53   static long src, dest;
54   int mype = p_shmem_my_pe();
55   int npes = p_shmem_n_pes();
56 
57   src = mype;
58 
59   p_shmem_barrier_all();
60 
61   if (mype == 0) {
62     p_shmem_long_p(&dest, src, 1);
63   }
64 
65   p_shmem_barrier_all();
66 
67   if (mype == 1) {
68     if (dest != 0) {
69       return false;
70     }
71   }
72 
73   return true;
74 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_p\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_put (void )"

.PP
Tests the shmem_put() function\&. Tests the shmem_put() routine\&.
.PP
This test verifies that the shmem_put() function correctly transfers data from PE 0 to PE 1\&.
.PP
PE 0 puts data into an array on PE 1\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB16\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
16                           {
17   static long src[10], dest[10];
18   int mype = p_shmem_my_pe();
19   int npes = p_shmem_n_pes();
20 
21   for (int i = 0; i < 10; i++) {
22     src[i] = i + mype;
23   }
24 
25   p_shmem_barrier_all();
26 
27   if (mype == 0) {
28     p_shmem_long_put(dest, src, 10, 1);
29   }
30 
31   p_shmem_barrier_all();
32 
33   if (mype == 1) {
34     for (int i = 0; i < 10; i++) {
35       if (dest[i] != i) {
36         return false;
37       }
38     }
39   }
40 
41   return true;
42 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_put\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_put_nbi (void )"

.PP
Tests the shmem_put_nbi() function\&. Tests the shmem_put_nbi() routine\&.
.PP
This test verifies that the shmem_put_nbi() function correctly transfers data from PE 0 to PE 1 using non-blocking operations\&.
.PP
PE 0 puts data into an array on PE 1 using non-blocking operations\&. 
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB230\fP of file \fBremote_tests\&.cpp\fP\&.
.nf
230                               {
231   static long src[10], dest[10];
232   int mype = p_shmem_my_pe();
233   int npes = p_shmem_n_pes();
234 
235   for (int i = 0; i < 10; i++) {
236     src[i] = i + mype;
237   }
238 
239   p_shmem_barrier_all();
240 
241   if (mype == 0) {
242     p_shmem_long_put_nbi(dest, src, 10, 1);
243     p_shmem_quiet();
244   }
245 
246   p_shmem_barrier_all();
247 
248   if (mype == 1) {
249     for (int i = 0; i < 10; i++) {
250       if (dest[i] != i) {
251         return false;
252       }
253     }
254   }
255 
256   return true;
257 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_long_put_nbi\fP, \fBp_shmem_my_pe\fP, \fBp_shmem_n_pes\fP, and \fBp_shmem_quiet\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for shmemvv from the source code\&.
