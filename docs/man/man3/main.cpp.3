.TH "src/main.cpp" 3 "Version 0.1" "shmemvv" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/main.cpp \- Driver file for the test suite\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'shmemvv\&.hpp'\fP
.br
\fR#include 'routines\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.RI "Main function for running the test suite\&. "
.in -1c
.SH "Detailed Description"
.PP 
Driver file for the test suite\&. 


.PP
Definition in file \fBmain\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "int main (int argc, char * argv[])"

.PP
Main function for running the test suite\&. 
.PP
\fBParameters\fP
.RS 4
\fIargc\fP Number of command-line arguments\&. 
.br
\fIargv\fP Array of command-line argument strings\&. 
.RE
.PP
\fBReturns\fP
.RS 4
EXIT_SUCCESS on success, EXIT_FAILURE on failure\&. 
.RE
.PP

.PP
Definition at line \fB15\fP of file \fBmain\&.cpp\fP\&.
.nf
15                                  {
16   int mype = 0;
17   int npes = 0;
18   std::string version = "";
19   std::string name = "";
20   test_options opts;
21 
22   /* Variables to hold test results */
23   bool result_shmem_init = true;
24   bool result_shmem_init_thread = true;
25   bool result_shmem_barrier_all = true;
26   bool result_shmem_barrier = true;
27   bool result_shmem_my_pe = true;
28   bool result_shmem_n_pes = true;
29   bool result_shmem_pe_accessible = true;
30   bool result_shmem_info_get_version = true;
31   bool result_shmem_info_get_name = true;
32 
33   /************************* SETUP **************************/
34   void *handle = dlopen(NULL, RTLD_LAZY);
35   if (!handle) {
36     if (mype == 0) {
37       std::cerr << "Failed to open handle: " << dlerror() << std::endl;
38       return EXIT_FAILURE;
39     }
40   }
41 
42   /* Load OpenSHMEM routines */
43   if (!load_routines()) {
44     std::cerr << "Failed to load OpenSHMEM routines" << std::endl;
45     return EXIT_FAILURE;
46   }
47 
48   /* Initialize with shmem_init_thread() if THREADS tests were enabled */
49   if (opts\&.test_threads) {
50     if (!check_if_exists("shmem_init_thread")) {
51       if (mype == 0) {
52         display_not_found_warning("shmem_init_thread()", true);
53       }
54       return EXIT_FAILURE;
55     }
56     else {
57       result_shmem_init_thread = test_shmem_init_thread();
58       if (!result_shmem_init_thread) {
59         display_test_result("shmem_init_thread()", result_shmem_init_thread, true);
60         return EXIT_FAILURE;
61       }
62     }
63   }
64   else {
65     /* Initialize with regular shmem_init() if THREADS tests are not enabled */
66     if (!check_if_exists("shmem_init")) {
67       if (mype == 0) {
68         display_not_found_warning("shmem_init()", true);
69       }
70       return EXIT_FAILURE;
71     }
72     else {
73       result_shmem_init = test_shmem_init();
74       if (!result_shmem_init) {
75         display_test_result("shmem_init()", result_shmem_init, true);
76         return EXIT_FAILURE;
77       }
78     }
79   }
80 
81   /* Run shmem_barrier_all() test */
82   if (!check_if_exists("shmem_barrier_all")) {
83     if (mype == 0) {
84       display_not_found_warning("shmem_barrier_all()", true);
85     }
86     shmem_finalize();
87     return EXIT_FAILURE;
88   }
89   else {
90     result_shmem_barrier_all = test_shmem_barrier_all();
91     if (!result_shmem_barrier_all) {
92       if (shmem_my_pe() == 0) {
93         display_test_result("shmem_barrier_all()", result_shmem_barrier_all, true);
94       }
95       shmem_finalize();
96       return EXIT_FAILURE;
97     }
98   }
99 
100   /* Run shmem_my_pe() test */
101   shmem_barrier_all();
102   if (!check_if_exists("shmem_my_pe")) {
103     if (mype == 0) {
104       display_not_found_warning("shmem_my_pe()", true);
105     }
106     shmem_finalize();
107     return EXIT_FAILURE;
108   }
109   else {
110     mype = test_shmem_my_pe();
111     result_shmem_my_pe = mype >= 0;
112     if (!result_shmem_my_pe) {
113       if (mype == 0) {
114         display_test_result("shmem_my_pe()", result_shmem_my_pe, true);
115       }
116       shmem_finalize();
117       return EXIT_FAILURE;
118     }
119   }
120 
121   /* Run shmem_n_pes() test */
122   shmem_barrier_all();
123   if (!check_if_exists("shmem_n_pes")) {
124     if (mype == 0) {
125       display_not_found_warning("shmem_n_pes", true);
126     }
127     shmem_finalize();
128     return EXIT_FAILURE;
129   }
130   else {
131     /* Set npes */
132     npes = test_shmem_n_pes();
133     result_shmem_n_pes = npes > 0;
134     if (!result_shmem_n_pes) {
135       if (mype == 0) {
136         display_test_result("shmem_n_pes()", result_shmem_n_pes, true);
137       }
138       shmem_finalize();
139       return EXIT_FAILURE;
140     }
141   }
142 
143   /* Run shmem_pe_accessible() test */
144   shmem_barrier_all();
145   if (!check_if_exists("shmem_pe_accessible")) {
146     if (mype == 0) {
147       display_not_found_warning("shmem_pe_accessible()", false);
148     }
149   }
150   else {
151     result_shmem_pe_accessible = test_shmem_pe_accessible();
152     if (!result_shmem_pe_accessible) {
153       if (mype == 0) {
154         display_test_result("shmem_pe_accessible()", result_shmem_pe_accessible, true);
155       }
156       shmem_finalize();
157       return EXIT_FAILURE;
158     }
159   }
160 
161   /*
162     Run test to make sure OpenSHMEM routines that aren't implemented
163     don't throw compiler errors
164   */
165   #ifdef _DEBUG_
166     shmem_barrier_all();
167     if (!check_if_exists("shmem_fake_routine")) {
168       if (mype == 0) {
169         display_not_found_warning("shmem_fake_routine()", false);
170       }
171     }
172     else {
173       test_shmem_fake_routine();
174     }
175   #endif
176 
177   /* Display help if requested */
178   shmem_barrier_all();
179   if (opts\&.help) {
180     if (mype == 0) {
181       display_help();
182     }
183     shmem_finalize();
184     return EXIT_SUCCESS;
185   }
186 
187   /* Display ASCII art logo */
188   shmem_barrier_all();
189   if (mype == 0) {
190     display_logo();
191   }
192 
193   /* Run shmem_barrier() test */
194   shmem_barrier_all();
195   if (!check_if_exists("shmem_barrier")) {
196     if (mype == 0) {
197       display_not_found_warning("shmem_barrier()", false);
198     }
199   }
200   else {
201     result_shmem_barrier = test_shmem_barrier();
202     shmem_barrier_all();
203   }
204 
205   /* Run shmem_info_get_version() test */
206   shmem_barrier_all();
207   if (!check_if_exists("shmem_info_get_version")) {
208     result_shmem_info_get_version = false;
209     if (mype == 0) {
210       display_not_found_warning("shmem_info_get_version()", false);
211     }
212   }
213   else {
214     version = test_shmem_info_get_version();
215     if (version == "") {
216       result_shmem_info_get_version = false;
217     }
218   }
219 
220   /* Run shmem_info_get_name() test */
221   shmem_barrier_all();
222   if (!check_if_exists("shmem_info_get_name")) {
223     result_shmem_info_get_name = false;
224     if (mype == 0) {
225       display_not_found_warning("shmem_info_get_name()", false);
226     }
227   }
228   else {
229     name = test_shmem_info_get_name();
230     if (name == "") {
231       result_shmem_info_get_name = false;
232     }
233   }
234 
235   /* Parse command\-line options */
236   if (!parse_opts(argc, argv, opts)) {
237     if (mype == 0) {
238       display_help();
239     }
240     shmem_finalize();
241     return EXIT_FAILURE;
242   }
243 
244   shmem_barrier_all();
245 
246   /* Enable all tests if \-\-all is specified or no specific test is selected */
247   if (opts\&.test_all ||
248       !(opts\&.test_setup || opts\&.test_threads || opts\&.test_mem || opts\&.test_teams ||
249         opts\&.test_ctx || opts\&.test_remote || opts\&.test_atomics || opts\&.test_signaling ||
250         opts\&.test_collectives || opts\&.test_pt2pt_synch || opts\&.test_mem_ordering || opts\&.test_locking))
251   {
252     opts\&.test_setup = true; opts\&.test_threads = true; opts\&.test_mem = true; opts\&.test_teams = true;
253     opts\&.test_ctx = true; opts\&.test_remote = true; opts\&.test_atomics = true; opts\&.test_signaling = true;
254     opts\&.test_collectives = true; opts\&.test_pt2pt_synch = true; opts\&.test_mem_ordering = true; opts\&.test_locking = true;
255   }
256   
257   /* Display test information */
258   shmem_barrier_all();
259   if (mype == 0) {
260     display_test_info(name, version, npes);
261   } 
262 
263   /* Print setup tests header */
264   shmem_barrier_all();
265   if (mype == 0) {
266     display_test_header("SETUP");
267   }
268 
269   /* shmem_init() and shmem_my_pe() tests passed */
270   shmem_barrier_all();
271   if (mype == 0) {
272     if (!opts\&.test_threads) {
273       display_test_result("shmem_init()", result_shmem_init, true);
274     }
275     display_test_result("shmem_barrier_all()", result_shmem_barrier_all, true);
276     display_test_result("shmem_barrier()", result_shmem_barrier, false);
277     display_test_result("shmem_my_pe()", result_shmem_my_pe, true);
278     display_test_result("shmem_n_pes()", result_shmem_n_pes, true);
279     display_test_result("shmem_pe_accessible()", result_shmem_pe_accessible, true);
280     if (version != "1\&.5" && version != "1\&.50") {
281       std::cerr << YELLOW_COLOR << "shmem_info_get_version() test did not return 1\&.5\&.\&.\&. Returned " << version << std::endl;
282     }
283     else {
284       display_test_result("shmem_info_get_version()", result_shmem_info_get_version, false);
285     }
286     display_test_result("shmem_info_get_name()", result_shmem_info_get_name,false);
287   }
288 
289   /************************* THREADS TESTS **************************/
290   if (opts\&.test_threads) {
291     shmem_barrier_all();
292     if (mype == 0) {
293       display_test_header("THREADS"); 
294     }
295     shmem_barrier_all();
296  
297     /* If we made it here shmem_init_thread() passed */
298     if (mype == 0) {
299       display_test_result("shmem_init_thread()", result_shmem_init_thread, true);
300     }
301 
302     /* Test shmem_query_thread() */
303     shmem_barrier_all();
304     if ( !check_if_exists("shmem_query_thread") ) {
305       if (mype == 0) {
306         display_not_found_warning("shmem_query_thread()", false);
307       }
308     }
309     else {
310       bool result_shmem_query_thread = test_shmem_query_thread();
311       shmem_barrier_all();
312       if (mype == 0) {
313         display_test_result("shmem_query_thread()", result_shmem_query_thread, false);
314       }
315     }
316   }
317 
318   /************************* MEMORY TESTS **************************/
319   if (opts\&.test_mem) {
320     shmem_barrier_all();
321     if (mype == 0) {
322       display_test_header("MEMORY MANAGEMENT"); 
323     }
324 
325     /* Test shmem_malloc() and shmem_free() */
326     shmem_barrier_all();
327     if ( check_if_exists("shmem_malloc") && check_if_exists("shmem_free") ) {
328       bool result_shmem_malloc_free = test_shmem_malloc_free();
329       shmem_barrier_all();
330       if (mype == 0) {
331         display_test_result("shmem_malloc()", result_shmem_malloc_free, false);
332         display_test_result("shmem_free()", result_shmem_malloc_free, false);
333       }
334     }
335     else {
336       if ( !check_if_exists("shmem_malloc") ) {
337         if (mype == 0) {
338           display_not_found_warning("shmem_malloc()", false);
339         }
340       }
341       if ( !check_if_exists("shmem_free") ) {
342         if (mype == 0) {
343           display_not_found_warning("shmem_free()", false);
344         }
345       }
346     } 
347 
348     /* Test shmem_ptr() */
349     shmem_barrier_all();
350     if ( !check_if_exists("shmem_ptr") ) {
351       if (mype == 0) {
352         display_not_found_warning("shmem_ptr()", false);
353       }
354     }
355     else {
356       bool result_shmem_ptr = test_shmem_ptr();
357       shmem_barrier_all();
358       if (mype == 0) {
359         display_test_result("shmem_ptr()", result_shmem_ptr, false);
360       }
361     }
362 
363     /* Test shmem_addr_accessible */
364     shmem_barrier_all();
365     if ( !check_if_exists("shmem_addr_accessible") ) {
366       if (mype == 0) {
367         display_not_found_warning("shmem_addr_accessible", false);
368       }
369     }
370     else {
371       bool result_shmem_addr_accessible = test_shmem_addr_accessible();
372       shmem_barrier_all();
373       if (mype == 0) {
374         display_test_result("shmem_addr_accessible()", result_shmem_addr_accessible, false);
375       }
376     }
377 
378     /* Test shmem_realloc() */
379     shmem_barrier_all();
380     if ( !check_if_exists("shmem_realloc") ) {
381       if (mype == 0) {
382         display_not_found_warning("shme_realloc()", false);
383       }
384     }
385     else {
386       bool result_shmem_realloc = test_shmem_realloc();
387       shmem_barrier_all();
388       if (mype == 0) {
389         display_test_result("shmem_realloc()", result_shmem_realloc, false); 
390       }
391     }
392 
393     /* Test shmem_align() */
394     shmem_barrier_all();
395     if ( !check_if_exists("shmem_align") ) {
396       if (mype == 0) {
397         display_not_found_warning("shmem_align()", false);
398       }
399     }
400     else {
401       bool result_shmem_align = test_shmem_align();
402       shmem_barrier_all();
403       if (mype == 0) {
404         display_test_result("shmem_align()", result_shmem_align, false);
405       }
406     }
407 
408     /* Test shmem_malloc_with_hints() */ 
409     shmem_barrier_all();
410     if ( !check_if_exists("shmem_malloc_with_hints") ) {
411       if (mype == 0) {
412         display_not_found_warning("shmem_malloc_with_hints()", false);
413       }
414     }
415     else {
416       bool result_shmem_malloc_with_hints = test_shmem_malloc_with_hints();
417       shmem_barrier_all();
418       if (mype == 0) {
419         display_test_result("shmem_malloc_with_hints()", result_shmem_malloc_with_hints, false);
420       }
421     }
422 
423     /* Test shmem_calloc() */
424     shmem_barrier_all();
425     if ( !check_if_exists("shmem_calloc") ) {
426       if (mype == 0) {
427         display_not_found_warning("shmem_calloc()", false);
428       }
429     }
430     else {
431       bool result_shmem_calloc = test_shmem_calloc();
432       shmem_barrier_all();
433       if (mype == 0) {
434         display_test_result("shmem_calloc()", result_shmem_calloc, false);
435       }
436     }
437   }
438 
439   /************************* TEAMS TESTS **************************/
440   if (opts\&.test_teams) {
441     shmem_barrier_all();
442     if (mype == 0) {
443       display_test_header("TEAMS MANAGEMENT"); 
444     }
445 
446     /* Run shmem_team_my_pe() test */
447     shmem_barrier_all();
448     if ( !check_if_exists("shmem_team_my_pe") ) {
449       if (mype == 0) {
450         display_not_found_warning("shmem_team_my_pe()", true);
451       }
452     }
453     else {
454       bool result_shmem_team_my_pe = test_shmem_team_my_pe();
455       shmem_barrier_all();
456       if (mype == 0) {
457         display_test_result("shmem_team_my_pe()", result_shmem_team_my_pe, false);
458       }
459     }
460 
461     /* Run shmem_team_n_pes() test */
462     shmem_barrier_all();
463     if ( !check_if_exists("shmem_team_n_pes") ) {
464       if (mype == 0) {
465         display_not_found_warning("shmem_team_n_pes()", true);
466       }
467     }
468     else {
469       bool result_shmem_team_n_pes = test_shmem_team_n_pes();
470       shmem_barrier_all();
471       if (mype == 0) {
472         display_test_result("shmem_team_n_pes()", result_shmem_team_n_pes, false);
473       }
474     }
475 
476     /* Run shmem_team_get_config() test */
477     shmem_barrier_all();
478     if ( !check_if_exists("shmem_team_get_config") ) {
479       if (mype == 0) {
480         display_not_found_warning("shmem_team_get_config()", false);
481       }
482     }
483     else {
484       bool result_shmem_team_get_config = test_shmem_team_get_config();
485       shmem_barrier_all();
486       if (mype == 0) {
487         display_test_result("shmem_team_get_config()", result_shmem_team_get_config, false);
488       }
489     }
490 
491     /* Run shmem_team_translate_pe() test */
492     shmem_barrier_all();
493     if ( !check_if_exists("shmem_team_translate_pe") ) {
494       if (mype == 0) {
495         display_not_found_warning("shmem_team_translate_pe()", false);
496       }
497     }
498     else {
499       bool result_shmem_team_translate_pe = test_shmem_team_translate_pe();
500       shmem_barrier_all();
501       if (mype == 0) {
502         display_test_result("shmem_team_translate_pe()", result_shmem_team_translate_pe, false);
503       }
504     }
505 
506     /* Run shmem_team_split_strided() test */
507     shmem_barrier_all();
508     if ( !check_if_exists("shmem_team_split_strided") ) {
509       if (mype == 0) {
510         display_not_found_warning("shmem_team_split_strided()", false);
511       }
512     }
513     else {
514       bool result_shmem_team_split_strided = test_shmem_team_split_strided();
515       shmem_barrier_all();
516       if (mype == 0) {
517         display_test_result("shmem_team_split_strided()", result_shmem_team_split_strided, false);
518       }
519     }
520 
521     /* Run shmem_team_split_2d() test */
522     shmem_barrier_all();
523     if ( !check_if_exists("shmem_team_split_2d") ) {
524       if (mype == 0) {
525         display_not_found_warning("shmem_team_split_2d()", false);
526       }
527     }
528     else {
529       bool result_shmem_team_split_2d = test_shmem_team_split_2d();
530       shmem_barrier_all();
531       if (mype == 0) {
532         display_test_result("shmem_team_split_2d()", result_shmem_team_split_2d, false);
533       }
534     }
535 
536     /* Run shmem_team_destroy() test */
537     shmem_barrier_all();
538     if ( !check_if_exists("shmem_team_destroy") ) {
539       if (mype == 0) {
540         display_not_found_warning("shmem_team_destroy()", false);
541       }
542     }
543     else {
544       bool result_shmem_team_destroy = test_shmem_team_destroy();
545       shmem_barrier_all();
546       if (mype == 0) {
547         display_test_result("shmem_team_destroy()", result_shmem_team_destroy, false);
548       }
549     }
550   }
551 
552   /************************* CTX TESTS **************************/
553   if (opts\&.test_ctx) {
554     shmem_barrier_all();
555     if (mype == 0) {
556       display_test_header("COMMUNICATION / CONTEXT"); 
557     }
558 
559     /* Run shmem_ctx_create() test */
560     shmem_barrier_all();
561     if (!check_if_exists("shmem_ctx_create")) {
562       if (mype == 0) {
563         display_not_found_warning("shmem_ctx_create()", false);
564       }
565     }
566     else {
567       bool result_shmem_ctx_create = test_shmem_ctx_create();
568       shmem_barrier_all();
569       if (mype == 0) {
570         display_test_result("shmem_ctx_create()", result_shmem_ctx_create, false);
571       }
572     }
573 
574     /* Run shmem_team_create_ctx() test */
575     shmem_barrier_all();
576     if (!check_if_exists("shmem_team_create_ctx")) {
577       if (mype == 0) {
578         display_not_found_warning("shmem_team_create_ctx()", false);
579       }
580     }
581     else {
582       bool result_shmem_team_create_ctx = test_shmem_team_create_ctx();
583       shmem_barrier_all();
584       if (mype == 0) {
585         display_test_result("shmem_team_create_ctx()", result_shmem_team_create_ctx, false);
586       }
587     }
588 
589     /* Run shmem_ctx_destroy() test */
590     shmem_barrier_all();
591     if (!check_if_exists("shmem_ctx_destroy")) {
592       if (mype == 0) {
593         display_not_found_warning("shmem_ctx_destroy()", false);
594       }
595     }
596     else {
597       bool result_shmem_ctx_destroy = test_shmem_ctx_destroy();
598       shmem_barrier_all();
599       if (mype == 0) {
600         display_test_result("shmem_ctx_destroy()", result_shmem_ctx_destroy, false);
601       }
602     }
603 
604     /* Run shmem_ctx_get_team() test */
605     shmem_barrier_all();
606     if (!check_if_exists("shmem_ctx_get_team")) {
607       if (mype == 0) {
608         display_not_found_warning("shmem_ctx_get_team()", false);
609       }
610     }
611     else {
612       bool result_shmem_ctx_get_team = test_shmem_ctx_get_team();
613       shmem_barrier_all();
614       if (mype == 0) {
615         display_test_result("shmem_ctx_get_team()", result_shmem_ctx_get_team, false);
616       }
617     }
618   }
619 
620   /************************* REMOTE TESTS **************************/
621   if (opts\&.test_remote) {
622     shmem_barrier_all();
623     if (mype == 0) {
624       display_test_header("REMOTE MEMORY ACCESS"); 
625     }
626 
627     /* Check to make sure there are at least 2 PEs */
628     if ( !(npes > 1) ) {
629       if (mype == 0) {
630         display_not_enough_pes("REMOTE MEMORY ACCESS"); 
631       }
632     }
633     else {
634       /* Run shmem_put() test */
635       shmem_barrier_all();
636       if (!check_if_exists("shmem_long_put")) {
637         if (mype == 0) {
638           display_not_found_warning("shmem_long_put()", false);
639         }
640       }
641       else {
642         bool result_shmem_put = test_shmem_put();
643         shmem_barrier_all();
644         if (mype == 0) {
645           display_test_result("shmem_put()", result_shmem_put, false);
646         }
647       }
648 
649       /* Run shmem_p() test */
650       shmem_barrier_all();
651       if (!check_if_exists("shmem_long_p")) {
652         if (mype == 0) {
653           display_not_found_warning("shmem_long_p()", false);
654         }
655       }
656       else {
657         bool result_shmem_p = test_shmem_p();
658         shmem_barrier_all();
659         if (mype == 0) {
660           display_test_result("shmem_p()", result_shmem_p, false);
661         }
662       }
663 
664       /* Run shmem_iput() test */
665       shmem_barrier_all();
666       if (!check_if_exists("shmem_long_iput")) {
667         if (mype == 0) {
668           display_not_found_warning("shmem_long_iput()", false);
669         }
670       }
671       else {
672         bool result_shmem_iput = test_shmem_iput();
673         shmem_barrier_all();
674         if (mype == 0) {
675           display_test_result("shmem_iput()", result_shmem_iput, false);
676         }
677       }
678 
679       /* Run shmem_get() test */
680       shmem_barrier_all();
681       if (!check_if_exists("shmem_long_get")) {
682         if (mype == 0) {
683           display_not_found_warning("shmem_long_get()", false);
684         }
685       }
686       else {
687         bool result_shmem_get = test_shmem_get();
688         shmem_barrier_all();
689         if (mype == 0) {
690           display_test_result("shmem_get()", result_shmem_get, false);
691         }
692       }
693 
694       /* Run shmem_g() test */
695       shmem_barrier_all();
696       if (!check_if_exists("shmem_long_g")) {
697         if (mype == 0) {
698           display_not_found_warning("shmem_long_g()", false);
699         }
700       }
701       else {
702         bool result_shmem_g = test_shmem_g();
703         shmem_barrier_all();
704         if (mype == 0) {
705           display_test_result("shmem_g()", result_shmem_g, false);
706         }
707       }
708 
709       /* Run shmem_iget() test */
710       shmem_barrier_all();
711       if (!check_if_exists("shmem_long_iget")) {
712         if (mype == 0) {
713           display_not_found_warning("shmem_long_iget()", false);
714         }
715       }
716       else {
717         bool result_shmem_iget = test_shmem_iget();
718         shmem_barrier_all();
719         if (mype == 0) {
720           display_test_result("shmem_iget()", result_shmem_iget, false);
721         }
722       }
723 
724       /* Run shmem_put_nbi() test */
725       shmem_barrier_all();
726       if (!check_if_exists("shmem_long_put_nbi")) {
727         if (mype == 0) {
728           display_not_found_warning("shmem_long_put_nbi()", false);
729         }
730       }
731       else {
732         bool result_shmem_put_nbi = test_shmem_put_nbi();
733         shmem_barrier_all();
734         if (mype == 0) {
735           display_test_result("shmem_put_nbi()", result_shmem_put_nbi, false);
736         }
737       }
738 
739       /* Run shmem_get_nbi() test */
740       shmem_barrier_all();
741       if (!check_if_exists("shmem_long_get_nbi")) {
742         if (mype == 0) {
743           display_not_found_warning("shmem_long_get_nbi()", false);
744         }
745       }
746       else {
747         bool result_shmem_get_nbi = test_shmem_get_nbi();
748         shmem_barrier_all();
749         if (mype == 0) {
750           display_test_result("shmem_get_nbi()", result_shmem_get_nbi, false);
751         }
752       }
753     }
754   }
755   /************************* ATOMICS TESTS **************************/
756   if (opts\&.test_atomics) {
757     shmem_barrier_all();
758     if (mype == 0) {
759       display_test_header("ATOMIC MEMORY OPS"); 
760     }
761 
762     /* Make sure there are at least 2 PEs */
763     if ( !(npes > 1) ) {
764       if (mype == 0) {
765         display_not_enough_pes("ATOMIC MEMORY OPS");
766       }
767     }
768     else {
769       /* Run shmem_atomic_fetch() test */
770       shmem_barrier_all();
771       if (!check_if_exists("shmem_ulong_atomic_fetch")) {
772         if (mype == 0) {
773           display_not_found_warning("shmem_atomic_fetch()", false);
774         }
775       }
776       else {
777         bool result_shmem_atomic_fetch = test_shmem_atomic_fetch();
778         shmem_barrier_all();
779         if (mype == 0) {
780           display_test_result("shmem_atomic_fetch()", result_shmem_atomic_fetch, false);
781         }
782       }
783 
784       /* Run shmem_atomic_set() test */
785       shmem_barrier_all();
786       if (!check_if_exists("shmem_ulong_atomic_set")) {
787         if (mype == 0) {
788           display_not_found_warning("shmem_atomic_set()", false);
789         }
790       }
791       else {
792         bool result_shmem_atomic_set = test_shmem_atomic_set();
793         shmem_barrier_all();
794         if (mype == 0) {
795           display_test_result("shmem_atomic_set()", result_shmem_atomic_set, false); 
796         }
797       }
798 
799       /* Run shmem_atomic_compare_swap() test */
800       shmem_barrier_all();
801       if (!check_if_exists("shmem_ulong_atomic_compare_swap")) {
802         if (mype == 0) {
803           display_not_found_warning("shmem_atomic_compare_swap()", false);
804         }
805       }
806       else {
807         bool result_shmem_atomic_compare_swap = test_shmem_atomic_compare_swap();
808         shmem_barrier_all();
809         if (mype == 0) {
810           display_test_result("shmem_atomic_compare_swap()", result_shmem_atomic_compare_swap, false); 
811         }
812       }
813 
814       /* Run shmem_atomic_swap() test */
815       shmem_barrier_all();
816       if (!check_if_exists("shmem_ulong_atomic_swap")) {
817         if (mype == 0) {
818           display_not_found_warning("shmem_atomic_swap()", false);
819         }
820       }
821       else {
822         bool result_shmem_atomic_swap = test_shmem_atomic_swap();
823         shmem_barrier_all();
824         if (mype == 0) {
825           display_test_result("shmem_atomic_swap()", result_shmem_atomic_swap, false);
826         }
827       }
828 
829       /* Run shmem_atomic_fetch_inc() test */
830       shmem_barrier_all();
831       if (!check_if_exists("shmem_ulong_atomic_fetch_inc")) {
832         if (mype == 0) {
833           display_not_found_warning("shmem_atomic_fetch_inc()", false);
834         }
835       }
836       else {
837         bool result_shmem_atomic_fetch_inc = test_shmem_atomic_fetch_inc();
838         shmem_barrier_all();
839         if (mype == 0) {
840           display_test_result("shmem_atomic_fetch_inc()", result_shmem_atomic_fetch_inc, false);
841         }
842       }
843 
844       /* Run shmem_atomic_inc() test */
845       shmem_barrier_all();
846       if (!check_if_exists("shmem_ulong_atomic_inc")) {
847         if (mype == 0) {
848           display_not_found_warning("shmem_atomic_inc()", false);
849         }
850       }
851       else {
852         bool result_shmem_atomic_inc = test_shmem_atomic_inc();
853         shmem_barrier_all();
854         if (mype == 0) {
855           display_test_result("shmem_atomic_inc()", result_shmem_atomic_inc, false);
856         }
857       }
858 
859       /* Run shmem_atomic_fetch_add() test */
860       shmem_barrier_all();
861       if (!check_if_exists("shmem_ulong_atomic_fetch_add")) {
862         if (mype == 0) {
863           display_not_found_warning("shmem_atomic_fetch_add()", false);
864         }
865       }
866       else {
867         bool result_shmem_atomic_fetch_add = test_shmem_atomic_fetch_add();
868         shmem_barrier_all();
869         if (mype == 0) {
870           display_test_result("shmem_atomic_fetch_add()", result_shmem_atomic_fetch_add, false);
871         }
872       }
873 
874       /* Run shmem_atomic_add() test */
875       shmem_barrier_all();
876       if (!check_if_exists("shmem_ulong_atomic_add")) {
877         if (mype == 0) {
878           display_not_found_warning("shmem_atomic_add()", false);
879         }
880       }
881       else {
882         bool result_shmem_atomic_add = test_shmem_atomic_add();
883         shmem_barrier_all();
884         if (mype == 0) {
885           display_test_result("shmem_atomic_add()", result_shmem_atomic_add, false);
886         }
887       }
888 
889       /* Run shmem_atomic_fetch_and() test */
890       shmem_barrier_all();
891       if (!check_if_exists("shmem_ulong_atomic_fetch_and")) {
892         if (mype == 0) {
893           display_not_found_warning("shmem_atomic_fetch_and()", false);
894         }
895       }
896       else {
897         bool result_shmem_atomic_fetch_and = test_shmem_atomic_fetch_and();
898         shmem_barrier_all();
899         if (mype == 0) {
900           display_test_result("shmem_atomic_fetch_and()", result_shmem_atomic_fetch_and, false);
901         }
902       }
903 
904       /* Run shmem_atomic_and() test */
905       shmem_barrier_all();
906       if (!check_if_exists("shmem_ulong_atomic_and")) {
907         if (mype == 0) {
908           display_not_found_warning("shmem_atomic_and()", false);
909         }
910       }
911       else {
912         bool result_shmem_atomic_and = test_shmem_atomic_and();
913         shmem_barrier_all();
914         if (mype == 0) {
915           display_test_result("shmem_atomic_and()", result_shmem_atomic_and, false);
916         }
917       }
918 
919       /* Run shmem_atomic_fetch_or() test */
920       shmem_barrier_all();
921       if (!check_if_exists("shmem_ulong_atomic_fetch_or")) {
922         if (mype == 0) {
923           display_not_found_warning("shmem_atomic_fetch_or()", false);
924         }
925       }
926       else {
927         bool result_shmem_atomic_fetch_or = test_shmem_atomic_fetch_or();
928         shmem_barrier_all();
929         if (mype == 0) {
930           display_test_result("shmem_atomic_fetch_or()", result_shmem_atomic_fetch_or, false);
931         }
932       }
933 
934       /* Run shmem_atomic_or() test */
935       shmem_barrier_all();
936       if (!check_if_exists("shmem_ulong_atomic_or")) {
937         if (mype == 0) {
938           display_not_found_warning("shmem_atomic_or()", false);
939         }
940       }
941       else {
942         bool result_shmem_atomic_or = test_shmem_atomic_or();
943         shmem_barrier_all();
944         if (mype == 0) {
945           display_test_result("shmem_atomic_or()", result_shmem_atomic_or, false);
946         }
947       }
948 
949       /* Run shmem_atomic_fetch_xor() test */
950       shmem_barrier_all();
951       if (!check_if_exists("shmem_ulong_atomic_fetch_xor")) {
952         if (mype == 0) {
953           display_not_found_warning("shmem_atomic_fetch_xor()", false);
954         }
955       }
956       else {
957         bool result_shmem_atomic_fetch_xor = test_shmem_atomic_fetch_xor();
958         shmem_barrier_all();
959         if (mype == 0) {
960           display_test_result("shmem_atomic_fetch_xor()", result_shmem_atomic_fetch_xor, false);
961         }
962       }
963 
964       /* Run shmem_atomic_xor() test */
965       shmem_barrier_all();
966       if (!check_if_exists("shmem_ulong_atomic_xor")) {
967         if (mype == 0) {
968           display_not_found_warning("shmem_atomic_xor()", false);
969         }
970       }
971       else {
972         bool result_shmem_atomic_xor = test_shmem_atomic_xor();
973         shmem_barrier_all();
974         if (mype == 0) {
975           display_test_result("shmem_atomic_xor()", result_shmem_atomic_xor, false);
976         }
977       }
978 
979       /* Run shmem_atomic_fetch_nbi() test */
980       shmem_barrier_all();
981       if (!check_if_exists("shmem_ulong_atomic_fetch_nbi")) {
982         if (mype == 0) {
983           display_not_found_warning("shmem_atomic_fetch_nbi()", false);
984         }
985       }
986       else {
987         bool result_shmem_atomic_fetch_nbi = test_shmem_atomic_fetch_nbi();
988         shmem_barrier_all();
989         if (mype == 0) {
990           display_test_result("shmem_atomic_fetch_nbi()", result_shmem_atomic_fetch_nbi, false);
991         }
992       }
993 
994       /* Run shmem_atomic_compare_swap_nbi() test */
995       shmem_barrier_all();
996       if (!check_if_exists("shmem_ulong_atomic_compare_swap_nbi")) {
997         if (mype == 0) {
998           display_not_found_warning("shmem_atomic_compare_swap_nbi()", false);
999         }
1000       }
1001       else {
1002         bool result_shmem_atomic_compare_swap_nbi = test_shmem_atomic_compare_swap_nbi();
1003         shmem_barrier_all();
1004         if (mype == 0) {
1005           display_test_result("shmem_atomic_compare_swap_nbi()", result_shmem_atomic_compare_swap_nbi, false);
1006         }
1007       }
1008 
1009       /* Run shmem_atomic_swap_nbi() test */
1010       shmem_barrier_all();
1011       if (!check_if_exists("shmem_ulong_atomic_swap_nbi")) {
1012         if (mype == 0) {
1013           display_not_found_warning("shmem_atomic_swap_nbi()", false);
1014         }
1015       }
1016       else {
1017         bool result_shmem_atomic_swap_nbi = test_shmem_atomic_swap_nbi();
1018         shmem_barrier_all();
1019         if (mype == 0) {
1020           display_test_result("shmem_atomic_swap_nbi()", result_shmem_atomic_swap_nbi, false);
1021         }
1022       }
1023 
1024       /* Run shmem_atomic_fetch_inc_nbi() test */
1025       shmem_barrier_all();
1026       if (!check_if_exists("shmem_ulong_atomic_fetch_inc_nbi")) {
1027         if (mype == 0) {
1028           display_not_found_warning("shmem_atomic_fetch_inc_nbi()", false);
1029         }
1030       }
1031       else {
1032         bool result_shmem_atomic_fetch_inc_nbi = test_shmem_atomic_fetch_inc_nbi();
1033         shmem_barrier_all();
1034         if (mype == 0) {
1035           display_test_result("shmem_atomic_fetch_inc_nbi()", result_shmem_atomic_fetch_inc_nbi, false);
1036         }
1037       }
1038 
1039       /* Run shmem_atomic_fetch_add_nbi() test */
1040       shmem_barrier_all();
1041       if (!check_if_exists("shmem_ulong_atomic_fetch_add_nbi")) {
1042         if (mype == 0) {
1043           display_not_found_warning("shmem_atomic_fetch_add_nbi()", false);
1044         }
1045       }
1046       else {
1047         bool result_shmem_atomic_fetch_add_nbi = test_shmem_atomic_fetch_add_nbi();
1048         shmem_barrier_all();
1049         if (mype == 0) {
1050           display_test_result("shmem_atomic_fetch_add_nbi()", result_shmem_atomic_fetch_add_nbi, false);
1051         }
1052       }
1053 
1054       /* Run shmem_atomic_fetch_and_nbi() test */
1055       shmem_barrier_all();
1056       if (!check_if_exists("shmem_ulong_atomic_fetch_and_nbi")) {
1057         if (mype == 0) {
1058           display_not_found_warning("shmem_atomic_fetch_and_nbi()", false);
1059         }
1060       }
1061       else {
1062         bool result_shmem_atomic_fetch_and_nbi = test_shmem_atomic_fetch_and_nbi();
1063         shmem_barrier_all();
1064         if (mype == 0) {
1065           display_test_result("shmem_atomic_fetch_and_nbi()", result_shmem_atomic_fetch_and_nbi, false);
1066         }
1067       }
1068 
1069       /* Run shmem_atomic_fetch_or_nbi() test */
1070       shmem_barrier_all();
1071       if (!check_if_exists("shmem_ulong_atomic_fetch_or_nbi")) {
1072         if (mype == 0) {
1073           display_not_found_warning("shmem_atomic_fetch_or_nbi()", false);
1074         }
1075       }
1076       else {
1077         bool result_shmem_atomic_fetch_or_nbi = test_shmem_atomic_fetch_or_nbi();
1078         shmem_barrier_all();
1079         if (mype == 0) {
1080           display_test_result("shmem_atomic_fetch_or_nbi()", result_shmem_atomic_fetch_or_nbi, false);
1081         }
1082       }
1083 
1084       /* Run shmem_atomic_fetch_xor_nbi() test */
1085       shmem_barrier_all();
1086       if (!check_if_exists("shmem_ulong_atomic_fetch_xor_nbi")) {
1087         if (mype == 0) {
1088           display_not_found_warning("shmem_atomic_fetch_xor_nbi()", false);
1089         }
1090       }
1091       else {
1092         bool result_shmem_atomic_fetch_xor_nbi = test_shmem_atomic_fetch_xor_nbi();
1093         shmem_barrier_all();
1094         if (mype == 0) {
1095           display_test_result("shmem_atomic_fetch_xor_nbi()", result_shmem_atomic_fetch_xor_nbi, false);
1096         }
1097       }
1098     }
1099   }
1100   
1101   /************************* SIGNALING TESTS **************************/
1102   if (opts\&.test_signaling) {
1103     shmem_barrier_all();
1104     if (mype == 0) {
1105       display_test_header("SIGNALING OPS");
1106     }
1107 
1108     if (!(npes > 1)) {
1109       display_not_enough_pes("SIGNALING OPS");
1110     }
1111     else {
1112       /* Run shmem_put_signal() test */
1113       shmem_barrier_all();
1114       if (!check_if_exists("shmem_long_put_signal")) {
1115         if (mype == 0) {
1116           display_not_found_warning("shmem_long_put_signal()", false);
1117         }
1118       }
1119       else {
1120         bool result_shmem_put_signal = test_shmem_put_signal();
1121         shmem_barrier_all();
1122         if (mype == 0) {
1123           display_test_result("shmem_put_signal()", result_shmem_put_signal, false);
1124         }
1125       }
1126 
1127       /* Run shmem_put_signal_nbi() test */
1128       shmem_barrier_all();
1129       if (!check_if_exists("shmem_long_put_signal_nbi")) {
1130         if (mype == 0) {
1131           display_not_found_warning("shmem_long_put_signal_nbi()", false);
1132         }
1133       }
1134       else {
1135         bool result_shmem_put_signal_nbi = test_shmem_put_signal_nbi();
1136         shmem_barrier_all();
1137         if (mype == 0) {
1138           display_test_result("shmem_put_signal_nbi()", result_shmem_put_signal_nbi, false);
1139         }
1140       }
1141 
1142       /* Run shmem_signal_fetch() test */
1143       shmem_barrier_all();
1144       if (!check_if_exists("shmem_signal_fetch")) {
1145         if (mype == 0) {
1146           display_not_found_warning("shmem_signal_fetch()", false);
1147         }
1148       }
1149       else {
1150         bool result_shmem_signal_fetch = test_shmem_signal_fetch();
1151         shmem_barrier_all();
1152         if (mype == 0) {
1153           display_test_result("shmem_signal_fetch()", result_shmem_signal_fetch, false);
1154         }
1155       }
1156     }
1157   }
1158 
1159   /************************* COLLECTIVES TESTS **************************/
1160   if (opts\&.test_collectives) {
1161     /* Print project header */
1162     shmem_barrier_all();
1163     if (mype == 0) {
1164       display_test_header("COLLECTIVE OPS");
1165     }
1166 
1167     /* Check to make sure there are at least 2 PEs */
1168     if ( !(npes > 1) ) {
1169       if (mype == 0) {
1170         display_not_enough_pes("COLLECTIVE OPS");
1171       }
1172     }
1173     else {
1174       /* Run shmem_sync() test */
1175       shmem_barrier_all();
1176       if (!check_if_exists("shmem_sync")) {
1177         if (mype == 0) {
1178           display_not_found_warning("shmem_sync()", false);
1179         }
1180       } 
1181       else {
1182         bool result_shmem_sync = test_shmem_sync();
1183         shmem_barrier_all();
1184         if (mype == 0) {
1185           display_test_result("shmem_sync()", result_shmem_sync, false);
1186         }
1187       }
1188 
1189       /* Run shmem_sync_all() test */
1190       shmem_barrier_all();
1191       if (!check_if_exists("shmem_sync_all")) {
1192         if (mype == 0) {
1193           display_not_found_warning("shmem_sync_all()", false);
1194         }
1195       } 
1196       else {
1197         bool result_shmem_sync_all = test_shmem_sync_all();
1198         shmem_barrier_all();
1199         if (mype == 0) {
1200           display_test_result("shmem_sync_all()", result_shmem_sync_all, false);
1201         }
1202       }
1203 
1204       /* Run shmem_alltoall() test */
1205       shmem_barrier_all();
1206       if (!check_if_exists("shmem_long_alltoall")) {
1207         if (mype == 0) {
1208           display_not_found_warning("shmem_long_alltoall()", false);
1209         }
1210       } 
1211       else {
1212         bool result_shmem_alltoall = test_shmem_alltoall();
1213         shmem_barrier_all();
1214         if (mype == 0) {
1215           display_test_result("shmem_alltoall()", result_shmem_alltoall, false);
1216         }
1217       }
1218 
1219       /* Run shmem_alltoalls() test */
1220       shmem_barrier_all();
1221       if (!check_if_exists("shmem_long_alltoalls")) {
1222         if (mype == 0) {
1223           display_not_found_warning("shmem_long_alltoalls()", false);
1224         }
1225       } 
1226       else {
1227         bool result_shmem_alltoalls = test_shmem_alltoalls();
1228         shmem_barrier_all();
1229         if (mype == 0) {
1230           display_test_result("shmem_alltoalls()", result_shmem_alltoalls, false);
1231         }
1232       }
1233 
1234       /* Run shmem_broadcast() test */
1235       shmem_barrier_all();
1236       if (!check_if_exists("shmem_long_broadcast")) {
1237         if (mype == 0) {
1238           display_not_found_warning("shmem_long_broadcast()", false);
1239         }
1240       } 
1241       else {
1242         bool result_shmem_broadcast = test_shmem_broadcast();
1243         shmem_barrier_all();
1244         if (mype == 0) {
1245           display_test_result("shmem_broadcast()", result_shmem_broadcast, false);
1246         }
1247       }
1248 
1249       /* Run shmem_collect() test */
1250       shmem_barrier_all();
1251       if (!check_if_exists("shmem_long_collect")) {
1252         if (mype == 0) {
1253           display_not_found_warning("shmem_long_collect()", false);
1254         }
1255       } 
1256       else {
1257         bool result_shmem_collect = test_shmem_collect();
1258         shmem_barrier_all();
1259         if (mype == 0) {
1260           display_test_result("shmem_collect()", result_shmem_collect, false);
1261         }
1262       }
1263 
1264       /* Run shmem_fcollect() test */
1265       shmem_barrier_all();
1266       if (!check_if_exists("shmem_long_fcollect")) {
1267         if (mype == 0) {
1268           display_not_found_warning("shmem_long_fcollect()", false);
1269         }
1270       } 
1271       else {
1272         bool result_shmem_fcollect = test_shmem_fcollect();
1273         shmem_barrier_all();
1274         if (mype == 0) {
1275           display_test_result("shmem_fcollect()", result_shmem_fcollect, false);
1276         }
1277       }
1278 
1279       /* Run shmem_max_reduce() test */
1280       shmem_barrier_all();
1281       if (!check_if_exists("shmem_long_max_reduce")) {
1282         if (mype == 0) {
1283           display_not_found_warning("shmem_long_max_reduce()", false);
1284         }
1285       } 
1286       else {
1287         bool result_shmem_max_reduce = test_shmem_max_reduce();
1288         shmem_barrier_all();
1289         if (mype == 0) {
1290           display_test_result("shmem_max_reduce()", result_shmem_max_reduce, false);
1291         }
1292       }
1293 
1294       /* Run shmem_min_reduce() test */
1295       shmem_barrier_all();
1296       if (!check_if_exists("shmem_long_min_reduce")) {
1297         if (mype == 0) {
1298           display_not_found_warning("shmem_long_min_reduce()", false);
1299         }
1300       } 
1301       else {
1302         bool result_shmem_min_reduce = test_shmem_min_reduce();
1303         shmem_barrier_all();
1304         if (mype == 0) {
1305           display_test_result("shmem_min_reduce()", result_shmem_min_reduce, false);
1306         }
1307       }
1308 
1309       /* Run shmem_sum_reduce() test */
1310       shmem_barrier_all();
1311       if (!check_if_exists("shmem_long_sum_reduce")) {
1312         if (mype == 0) {
1313           display_not_found_warning("shmem_long_sum_reduce()", false);
1314         }
1315       } 
1316       else {
1317         bool result_shmem_sum_reduce = test_shmem_sum_reduce();
1318         shmem_barrier_all();
1319         if (mype == 0) {
1320           display_test_result("shmem_sum_reduce()", result_shmem_sum_reduce, false);
1321         }
1322       }
1323 
1324       /* Run shmem_prod_reduce() test */
1325       shmem_barrier_all();
1326       if (!check_if_exists("shmem_long_prod_reduce")) {
1327         if (mype == 0) {
1328           display_not_found_warning("shmem_long_prod_reduce()", false);
1329         }
1330       } 
1331       else {
1332         bool result_shmem_prod_reduce = test_shmem_prod_reduce();
1333         shmem_barrier_all();
1334         if (mype == 0) {
1335           display_test_result("shmem_prod_reduce()", result_shmem_prod_reduce, false);
1336         }
1337       }
1338     }
1339   }
1340 
1341   /************************* PT2PT TESTS **************************/
1342   if (opts\&.test_pt2pt_synch) {
1343     shmem_barrier_all();
1344     if (mype == 0) {
1345       display_test_header("POINT\-TO\-POINT SYNC OPS");
1346     }
1347 
1348     if (!(npes > 1)) {
1349       display_not_enough_pes("POINT\-TO\-POINT SYNCH OPS");
1350     }
1351     else {
1352       /* Run shmem_wait_until() test */
1353       shmem_barrier_all();
1354       if (!check_if_exists("shmem_long_wait_until")) {
1355         if (mype == 0) {
1356           display_not_found_warning("shmem_long_wait_until()", false);
1357         }
1358       }
1359       else {
1360         bool result_shmem_wait_until = test_shmem_wait_until();
1361         shmem_barrier_all();
1362         if (mype == 0) {
1363           display_test_result("shmem_wait_until()", result_shmem_wait_until, false);
1364         }
1365       }
1366 
1367       /* Run shmem_wait_until_all() test */
1368       shmem_barrier_all();
1369       if (!check_if_exists("shmem_long_wait_until_all")) {
1370         if (mype == 0) {
1371           display_not_found_warning("shmem_long_wait_until_all()", false);
1372         }
1373       }
1374       else {
1375         bool result_shmem_wait_until_all = test_shmem_wait_until_all();
1376         shmem_barrier_all();
1377         if (mype == 0) {
1378           display_test_result("shmem_wait_until_all()", result_shmem_wait_until_all, false);
1379         }
1380       }
1381 
1382       /* Run shmem_wait_until_any() test */
1383       shmem_barrier_all();
1384       if (!check_if_exists("shmem_long_wait_until_any")) {
1385         if (mype == 0) {
1386           display_not_found_warning("shmem_long_wait_until_any()", false);
1387         }
1388       }
1389       else {
1390         bool result_shmem_wait_until_any = test_shmem_wait_until_any();
1391         shmem_barrier_all();
1392         if (mype == 0) {
1393           display_test_result("shmem_wait_until_any()", result_shmem_wait_until_any, false);
1394         }
1395       }
1396 
1397       /* Run shmem_wait_until_some() test */
1398       shmem_barrier_all();
1399       if (!check_if_exists("shmem_long_wait_until_some")) {
1400         if (mype == 0) {
1401           display_not_found_warning("shmem_long_wait_until_some()", false);
1402         }
1403       }
1404       else {
1405         bool result_shmem_wait_until_some = test_shmem_wait_until_some();
1406         shmem_barrier_all();
1407         if (mype == 0) {
1408           display_test_result("shmem_wait_until_some()", result_shmem_wait_until_some, false);
1409         }
1410       }
1411 
1412       /* Run shmem_wait_until_all_vector() test */
1413       shmem_barrier_all();
1414       if (!check_if_exists("shmem_long_wait_until_all_vector")) {
1415         if (mype == 0) {
1416           display_not_found_warning("shmem_long_wait_until_all_vector()", false);
1417         }
1418       }
1419       else {
1420         bool result_shmem_wait_until_all_vector = test_shmem_wait_until_all_vector();
1421         shmem_barrier_all();
1422         if (mype == 0) {
1423           display_test_result("shmem_wait_until_all_vector()", result_shmem_wait_until_all_vector, false);
1424         }
1425       }
1426 
1427       /* Run shmem_wait_until_any_vector() test */
1428       shmem_barrier_all();
1429       if (!check_if_exists("shmem_long_wait_until_any_vector")) {
1430         if (mype == 0) {
1431           display_not_found_warning("shmem_long_wait_until_any_vector()", false);
1432         }
1433       }
1434       else {
1435         bool result_shmem_wait_until_any_vector = test_shmem_wait_until_any_vector();
1436         shmem_barrier_all();
1437         if (mype == 0) {
1438           display_test_result("shmem_wait_until_any_vector()", result_shmem_wait_until_any_vector, false);
1439         }
1440       }
1441 
1442       /* Run shmem_wait_until_some_vector() test */
1443       shmem_barrier_all();
1444       if (!check_if_exists("shmem_long_wait_until_some_vector")) {
1445         if (mype == 0) {
1446           display_not_found_warning("shmem_long_wait_until_some_vector()", false);
1447         }
1448       }
1449       else {
1450         bool result_shmem_wait_until_some_vector = test_shmem_wait_until_some_vector();
1451         shmem_barrier_all();
1452         if (mype == 0) {
1453           display_test_result("shmem_wait_until_some_vector()", result_shmem_wait_until_some_vector, false);
1454         }
1455       }
1456 
1457       /* Run shmem_test() test */
1458       shmem_barrier_all();
1459       if (!check_if_exists("shmem_long_test")) {
1460         if (mype == 0) {
1461           display_not_found_warning("shmem_long_test()", false);
1462         }
1463       }
1464       else {
1465         bool result_shmem_test = test_shmem_test();
1466         shmem_barrier_all();
1467         if (mype == 0) {
1468           display_test_result("shmem_test()", result_shmem_test, false);
1469         }
1470       }
1471 
1472       /* Run shmem_test_all() test */
1473       shmem_barrier_all();
1474       if (!check_if_exists("shmem_long_test_all")) {
1475         if (mype == 0) {
1476           display_not_found_warning("shmem_long_test_all()", false);
1477         }
1478       }
1479       else {
1480         bool result_shmem_test_all = test_shmem_test_all();
1481         shmem_barrier_all();
1482         if (mype == 0) {
1483           display_test_result("shmem_test_all()", result_shmem_test_all, false);
1484         }
1485       }
1486 
1487       /* Run shmem_test_any() test */
1488       shmem_barrier_all();
1489       if (!check_if_exists("shmem_long_test_any")) {
1490         if (mype == 0) {
1491           display_not_found_warning("shmem_long_test_any()", false);
1492         }
1493       }
1494       else {
1495         bool result_shmem_test_any = test_shmem_test_any();
1496         shmem_barrier_all();
1497         if (mype == 0) {
1498           display_test_result("shmem_test_any()", result_shmem_test_any, false);
1499         }
1500       }
1501 
1502       /* Run shmem_test_some() test */
1503       shmem_barrier_all();
1504       if (!check_if_exists("shmem_long_test_some")) {
1505         if (mype == 0) {
1506           display_not_found_warning("shmem_long_test_some()", false);
1507         }
1508       }
1509       else {
1510         bool result_shmem_test_some = test_shmem_test_some();
1511         shmem_barrier_all();
1512         if (mype == 0) {
1513           display_test_result("shmem_test_some()", result_shmem_test_some, false);
1514         }
1515       }
1516 
1517       /* Run shmem_test_all_vector() test */
1518       shmem_barrier_all();
1519       if (!check_if_exists("shmem_long_test_all_vector")) {
1520         if (mype == 0) {
1521           display_not_found_warning("shmem_long_test_all_vector()", false);
1522         }
1523       }
1524       else {
1525         bool result_shmem_test_all_vector = test_shmem_test_all_vector();
1526         shmem_barrier_all();
1527         if (mype == 0) {
1528           display_test_result("shmem_test_all_vector()", result_shmem_test_all_vector, false);
1529         }
1530       }
1531 
1532       /* Run shmem_test_any_vector() test */
1533       shmem_barrier_all();
1534       if (!check_if_exists("shmem_long_test_any_vector")) {
1535         if (mype == 0) {
1536           display_not_found_warning("shmem_long_test_any_vector()", false);
1537         }
1538       }
1539       else {
1540         bool result_shmem_test_any_vector = test_shmem_test_any_vector();
1541         shmem_barrier_all();
1542         if (mype == 0) {
1543           display_test_result("shmem_test_any_vector()", result_shmem_test_any_vector, false);
1544         }
1545       }
1546 
1547       /* Run shmem_test_some_vector() test */
1548       shmem_barrier_all();
1549       if (!check_if_exists("shmem_long_test_some_vector")) {
1550         if (mype == 0) {
1551           display_not_found_warning("shmem_long_test_some_vector()", false);
1552         }
1553       }
1554       else {
1555         bool result_shmem_test_some_vector = test_shmem_test_some_vector();
1556         shmem_barrier_all();
1557         if (mype == 0) {
1558           display_test_result("shmem_test_some_vector()", result_shmem_test_some_vector, false);
1559         }
1560       }
1561 
1562       /* Run shmem_signal_wait_until() test */
1563       shmem_barrier_all();
1564       if (!check_if_exists("shmem_signal_wait_until")) {
1565         if (mype == 0) {
1566           display_not_found_warning("shmem_signal_wait_until()", false);
1567         }
1568       }
1569       else {
1570         bool result_shmem_signal_wait_until = test_shmem_signal_wait_until();
1571         shmem_barrier_all();
1572         if (mype == 0) {
1573           display_test_result("shmem_signal_wait_until()", result_shmem_signal_wait_until, false); 
1574         }
1575       }
1576     }
1577   }
1578 
1579   /************************* MEM ORDERING TESTS **************************/
1580   if (opts\&.test_mem_ordering) {
1581     shmem_barrier_all();
1582     if (mype == 0) {
1583       display_test_header("MEMORY ORDERING");
1584     }
1585 
1586     /* Make sure there are at least 2 PEs */
1587     if ( !(npes > 1) ) {
1588       if (mype == 0) {
1589         display_not_enough_pes("MEMORY ORDERING");
1590       }
1591     }
1592     else {
1593       /* Run the shmem_fence() test */
1594       shmem_barrier_all();
1595       if ( !check_if_exists("shmem_fence") ) {
1596         if (mype == 0) {
1597           display_not_found_warning("shmem_fence()", false);
1598         }
1599       }
1600       else {
1601         bool result_shmem_fence = test_shmem_fence();
1602         shmem_barrier_all();
1603         if (mype == 0) {
1604           display_test_result("shmem_fence()", result_shmem_fence, false);
1605         }
1606       }
1607 
1608       /* Run the shmem_quiet() test */
1609       shmem_barrier_all();
1610       if ( !check_if_exists("shmem_quiet") ) {
1611         if (mype == 0) {
1612           display_not_found_warning("shmem_quiet()", false);
1613         }
1614       }
1615       else {
1616         bool result_shmem_quiet = test_shmem_quiet();
1617         shmem_barrier_all();
1618         if (mype == 0) {
1619           display_test_result("shmem_quiet()", result_shmem_quiet, false);
1620         }
1621       }
1622     }
1623   }
1624 
1625   /************************* DISTRIBUTED LOCKING TESTS **************************/
1626   if (opts\&.test_locking) {
1627     shmem_barrier_all();
1628     if (mype == 0) {
1629       display_test_header("DISTRIBUTED LOCKING");
1630     }
1631     shmem_barrier_all();
1632 
1633     /* Make sure there are at least 2 PEs */
1634     if ( !(npes > 1) ) {
1635       if (mype == 0) {
1636         display_not_enough_pes("DISTRIBUTED LOCKING");
1637       }
1638     }
1639     else {
1640       /* Run the shmem_set_lock and shmem_clear_lock tests */
1641       shmem_barrier_all();
1642       if ( !check_if_exists("shmem_set_lock") ) {
1643         if (mype == 0) {
1644           display_not_found_warning("shmem_set_lock()", false);
1645         }
1646       }
1647       if ( !check_if_exists("shmem_clear_lock" )) {
1648         if (mype == 0) {
1649           display_not_found_warning("shmem_clear_lock()", false);
1650         }
1651       }
1652       
1653       shmem_barrier_all();
1654       if ( check_if_exists("shmem_set_lock") && check_if_exists("shmem_clear_lock") ) {
1655         bool result_shmem_lock_unlock = test_shmem_lock_unlock();
1656         shmem_barrier_all();
1657         if (mype == 0) {
1658           display_test_result("shmem_set_lock()", result_shmem_lock_unlock, false);
1659           display_test_result("shmem_clear_lock()", result_shmem_lock_unlock, false);
1660         }
1661       }
1662     }
1663   }
1664 
1665   /************************* FINALIZATION **************************/
1666   /* Run shmem_finalize() test */
1667   shmem_barrier_all();
1668 
1669   if ( !check_if_exists("shmem_finalize") ) {
1670     display_not_found_warning("shmem_finalize()", true);
1671   }
1672   else {
1673     if (mype == 0) {
1674       display_test_header("FINALIZATION");
1675       display_test_result("shmem_finalize()", test_shmem_finalize(), false);
1676       std::cout << std::endl;
1677     }
1678   }
1679 
1680   /* We made it! End the program\&. */
1681   return EXIT_SUCCESS;
1682 }
.PP
.fi

.PP
References \fBcheck_if_exists()\fP, \fBdisplay_help()\fP, \fBdisplay_logo()\fP, \fBdisplay_not_enough_pes()\fP, \fBdisplay_not_found_warning()\fP, \fBdisplay_test_header()\fP, \fBdisplay_test_info()\fP, \fBdisplay_test_result()\fP, \fBtest_options::help\fP, \fBload_routines()\fP, \fBparse_opts()\fP, \fBtest_options::test_all\fP, \fBtest_options::test_atomics\fP, \fBtest_options::test_collectives\fP, \fBtest_options::test_ctx\fP, \fBtest_options::test_locking\fP, \fBtest_options::test_mem\fP, \fBtest_options::test_mem_ordering\fP, \fBtest_options::test_pt2pt_synch\fP, \fBtest_options::test_remote\fP, \fBtest_options::test_setup\fP, \fBtest_shmem_addr_accessible()\fP, \fBtest_shmem_align()\fP, \fBtest_shmem_alltoall()\fP, \fBtest_shmem_alltoalls()\fP, \fBtest_shmem_atomic_add()\fP, \fBtest_shmem_atomic_and()\fP, \fBtest_shmem_atomic_compare_swap()\fP, \fBtest_shmem_atomic_compare_swap_nbi()\fP, \fBtest_shmem_atomic_fetch()\fP, \fBtest_shmem_atomic_fetch_add()\fP, \fBtest_shmem_atomic_fetch_add_nbi()\fP, \fBtest_shmem_atomic_fetch_and()\fP, \fBtest_shmem_atomic_fetch_and_nbi()\fP, \fBtest_shmem_atomic_fetch_inc()\fP, \fBtest_shmem_atomic_fetch_inc_nbi()\fP, \fBtest_shmem_atomic_fetch_nbi()\fP, \fBtest_shmem_atomic_fetch_or()\fP, \fBtest_shmem_atomic_fetch_or_nbi()\fP, \fBtest_shmem_atomic_fetch_xor()\fP, \fBtest_shmem_atomic_fetch_xor_nbi()\fP, \fBtest_shmem_atomic_inc()\fP, \fBtest_shmem_atomic_or()\fP, \fBtest_shmem_atomic_set()\fP, \fBtest_shmem_atomic_swap()\fP, \fBtest_shmem_atomic_swap_nbi()\fP, \fBtest_shmem_atomic_xor()\fP, \fBtest_shmem_barrier()\fP, \fBtest_shmem_barrier_all()\fP, \fBtest_shmem_broadcast()\fP, \fBtest_shmem_calloc()\fP, \fBtest_shmem_collect()\fP, \fBtest_shmem_ctx_create()\fP, \fBtest_shmem_ctx_destroy()\fP, \fBtest_shmem_ctx_get_team()\fP, \fBtest_shmem_fake_routine()\fP, \fBtest_shmem_fcollect()\fP, \fBtest_shmem_fence()\fP, \fBtest_shmem_finalize()\fP, \fBtest_shmem_g()\fP, \fBtest_shmem_get()\fP, \fBtest_shmem_get_nbi()\fP, \fBtest_shmem_iget()\fP, \fBtest_shmem_info_get_name()\fP, \fBtest_shmem_info_get_version()\fP, \fBtest_shmem_init()\fP, \fBtest_shmem_init_thread()\fP, \fBtest_shmem_iput()\fP, \fBtest_shmem_lock_unlock()\fP, \fBtest_shmem_malloc_free()\fP, \fBtest_shmem_malloc_with_hints()\fP, \fBtest_shmem_max_reduce()\fP, \fBtest_shmem_min_reduce()\fP, \fBtest_shmem_my_pe()\fP, \fBtest_shmem_n_pes()\fP, \fBtest_shmem_p()\fP, \fBtest_shmem_pe_accessible()\fP, \fBtest_shmem_prod_reduce()\fP, \fBtest_shmem_ptr()\fP, \fBtest_shmem_put()\fP, \fBtest_shmem_put_nbi()\fP, \fBtest_shmem_put_signal()\fP, \fBtest_shmem_put_signal_nbi()\fP, \fBtest_shmem_query_thread()\fP, \fBtest_shmem_quiet()\fP, \fBtest_shmem_realloc()\fP, \fBtest_shmem_signal_fetch()\fP, \fBtest_shmem_signal_wait_until()\fP, \fBtest_shmem_sum_reduce()\fP, \fBtest_shmem_sync()\fP, \fBtest_shmem_sync_all()\fP, \fBtest_shmem_team_create_ctx()\fP, \fBtest_shmem_team_destroy()\fP, \fBtest_shmem_team_get_config()\fP, \fBtest_shmem_team_my_pe()\fP, \fBtest_shmem_team_n_pes()\fP, \fBtest_shmem_team_split_2d()\fP, \fBtest_shmem_team_split_strided()\fP, \fBtest_shmem_team_translate_pe()\fP, \fBtest_shmem_test()\fP, \fBtest_shmem_test_all()\fP, \fBtest_shmem_test_all_vector()\fP, \fBtest_shmem_test_any()\fP, \fBtest_shmem_test_any_vector()\fP, \fBtest_shmem_test_some()\fP, \fBtest_shmem_test_some_vector()\fP, \fBtest_shmem_wait_until()\fP, \fBtest_shmem_wait_until_all()\fP, \fBtest_shmem_wait_until_all_vector()\fP, \fBtest_shmem_wait_until_any()\fP, \fBtest_shmem_wait_until_any_vector()\fP, \fBtest_shmem_wait_until_some()\fP, \fBtest_shmem_wait_until_some_vector()\fP, \fBtest_options::test_signaling\fP, \fBtest_options::test_teams\fP, \fBtest_options::test_threads\fP, and \fBYELLOW_COLOR\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for shmemvv from the source code\&.
