.TH "src/tests/setup/setup_tests.cpp" 3 "Version 0.1" "shmemvv" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/tests/setup/setup_tests.cpp \- Contains OpenSHMEM setup tests\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'setup_tests\&.hpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBtest_shmem_fake_routine\fP (void)"
.br
.RI "Tests the presence of a fake routine for demonstration purposes\&. "
.ti -1c
.RI "bool \fBtest_shmem_init\fP ()"
.br
.RI "Tests the initialization of OpenSHMEM\&. "
.ti -1c
.RI "bool \fBtest_shmem_barrier_all\fP ()"
.br
.RI "Tests the barrier synchronization across all PEs\&. "
.ti -1c
.RI "bool \fBtest_shmem_barrier\fP (void)"
.br
.RI "Tests the shmem_barrier() routine\&. "
.ti -1c
.RI "int \fBtest_shmem_my_pe\fP ()"
.br
.RI "Tests retrieving the PE number of the calling PE\&. "
.ti -1c
.RI "int \fBtest_shmem_n_pes\fP ()"
.br
.RI "Tests retrieving the number of PEs\&. "
.ti -1c
.RI "bool \fBtest_shmem_pe_accessible\fP ()"
.br
.RI "Tests if a PE is accessible from the calling PE\&. "
.ti -1c
.RI "std::string \fBtest_shmem_info_get_version\fP ()"
.br
.RI "Tests retrieving the OpenSHMEM library version\&. "
.ti -1c
.RI "std::string \fBtest_shmem_info_get_name\fP ()"
.br
.RI "Tests retrieving the name of the OpenSHMEM library\&. "
.ti -1c
.RI "bool \fBtest_shmem_finalize\fP ()"
.br
.RI "Tests the finalization of OpenSHMEM\&. "
.ti -1c
.RI "bool \fBtest_shmem_global_exit\fP ()"
.br
.RI "Tests the global exit functionality of OpenSHMEM\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains OpenSHMEM setup tests\&. 


.PP
Definition in file \fBsetup_tests\&.cpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "bool test_shmem_barrier (void )"

.PP
Tests the shmem_barrier() routine\&. This test verifies that the \fRshmem_barrier\fP routine functions correctly\&.
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB70\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
70                               {
71   static long pSync[SHMEM_BARRIER_SYNC_SIZE];
72   for (int i = 0; i < SHMEM_BARRIER_SYNC_SIZE; i++) {
73     pSync[i] = SHMEM_SYNC_VALUE;
74   }
75 
76   p_shmem_barrier(0, 0, p_shmem_n_pes(), pSync);
77   return true;
78 }
.PP
.fi

.PP
References \fBp_shmem_barrier\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_barrier_all (void )"

.PP
Tests the barrier synchronization across all PEs\&. This test verifies that the barrier synchronization across all PEs is successful\&.
.PP
\fBReturns\fP
.RS 4
True if the barrier synchronization is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB45\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
45                               {
46   int mype = p_shmem_my_pe();
47   int npes = p_shmem_n_pes();
48 
49   static long sync;
50   sync = mype;
51 
52   p_shmem_barrier_all();
53 
54   bool test_passed = true;
55 
56   if (sync != mype) {
57     test_passed = false;
58   }
59 
60   return test_passed;
61 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_fake_routine (void )"

.PP
Tests the presence of a fake routine for demonstration purposes\&. Tests to make sure routines that aren't implemented in the tested OpenSHMEM library don't throw compiler errors\&.
.PP
This test checks if the \fRp_shmem_fake_routine\fP function is available and calls it if so\&.
.PP
\fBReturns\fP
.RS 4
True if the routine is available and called, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB15\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
15                                    {
16   if (p_shmem_fake_routine) {
17     p_shmem_fake_routine();
18     return true;
19   }
20   else {
21     std::cerr << "shmem_fake_routine is not available\&." << std::endl;
22     return false;
23   }
24 }
.PP
.fi

.PP
References \fBp_shmem_fake_routine\fP\&.
.SS "bool test_shmem_finalize (void )"

.PP
Tests the finalization of OpenSHMEM\&. This test verifies that the OpenSHMEM library finalizes successfully\&.
.PP
\fBReturns\fP
.RS 4
True if the finalization is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB171\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
171                            {
172   p_shmem_finalize();
173   return true;
174 }
.PP
.fi

.PP
References \fBp_shmem_finalize\fP\&.
.SS "bool test_shmem_global_exit (void )"

.PP
Tests the global exit functionality of OpenSHMEM\&. This test verifies that the \fRshmem_global_exit\fP function successfully performs a global exit\&.
.PP
\fBReturns\fP
.RS 4
True if the global exit is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB183\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
183                               {
184   p_shmem_global_exit(0);
185   return true;
186 }
.PP
.fi

.PP
References \fBp_shmem_global_exit\fP\&.
.SS "std::string test_shmem_info_get_name (void )"

.PP
Tests retrieving the name of the OpenSHMEM library\&. This test verifies that the \fRshmem_info_get_name\fP function returns the correct name of the OpenSHMEM library\&.
.PP
\fBReturns\fP
.RS 4
The name of the library as a string if successful, otherwise an empty string\&. 
.RE
.PP

.PP
Definition at line \fB153\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
153                                      {
154   char name[SHMEM_MAX_NAME_LEN];
155   p_shmem_info_get_name(name);
156   if (strlen(name) > 0) {
157     return std::string(name);
158   }
159   else {
160     return "";
161   }
162 }
.PP
.fi

.PP
References \fBp_shmem_info_get_name\fP\&.
.SS "std::string test_shmem_info_get_version (void )"

.PP
Tests retrieving the OpenSHMEM library version\&. This test verifies that the \fRshmem_info_get_version\fP function returns the correct version of the OpenSHMEM library\&.
.PP
\fBReturns\fP
.RS 4
The version as a string in the format 'major\&.minor'\&. 
.RE
.PP

.PP
Definition at line \fB138\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
138                                         {
139   int major, minor;
140   p_shmem_info_get_version(&major, &minor);
141   
142   std::string version = std::to_string(major) + "\&." + std::to_string(minor);
143   return version;
144 }
.PP
.fi

.PP
References \fBp_shmem_info_get_version\fP\&.
.SS "bool test_shmem_init (void )"

.PP
Tests the initialization of OpenSHMEM\&. This test verifies that the OpenSHMEM library initializes successfully\&.
.PP
\fBReturns\fP
.RS 4
True if the initialization is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB33\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
33                        {
34   p_shmem_init();
35   return true;
36 }
.PP
.fi

.PP
References \fBp_shmem_init\fP\&.
.SS "int test_shmem_my_pe (void )"

.PP
Tests retrieving the PE number of the calling PE\&. This test verifies that the \fRshmem_my_pe\fP function returns a valid PE number\&.
.PP
\fBReturns\fP
.RS 4
The PE number on success, -1 on failure\&. 
.RE
.PP

.PP
Definition at line \fB87\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
87                        {
88   int mype = p_shmem_my_pe();
89   if (mype >= 0) {
90     return mype;
91   }
92   else {
93     return \-1;
94   }
95 }
.PP
.fi

.PP
References \fBp_shmem_my_pe\fP\&.
.SS "int test_shmem_n_pes (void )"

.PP
Tests retrieving the number of PEs\&. This test verifies that the \fRshmem_n_pes\fP function returns a valid number of PEs\&.
.PP
\fBReturns\fP
.RS 4
The number of PEs if greater than 0, otherwise 0\&. 
.RE
.PP

.PP
Definition at line \fB104\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
104                        {
105   int npes = p_shmem_n_pes();
106   if (!(npes > 0)) {
107     return 0;
108   }
109   else {
110     return npes;
111   }
112 }
.PP
.fi

.PP
References \fBp_shmem_n_pes\fP\&.
.SS "bool test_shmem_pe_accessible (void )"

.PP
Tests if a PE is accessible from the calling PE\&. This test verifies that the \fRshmem_pe_accessible\fP function correctly reports accessibility of all PEs\&.
.PP
\fBReturns\fP
.RS 4
True if all PEs are accessible, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB121\fP of file \fBsetup_tests\&.cpp\fP\&.
.nf
121                                 {
122   int npes = p_shmem_n_pes();
123   for (int pe = 0; pe < npes; ++pe) {
124     if (!p_shmem_pe_accessible(pe)) {
125       return false;
126     }
127   }
128   return true;
129 }
.PP
.fi

.PP
References \fBp_shmem_n_pes\fP, and \fBp_shmem_pe_accessible\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for shmemvv from the source code\&.
