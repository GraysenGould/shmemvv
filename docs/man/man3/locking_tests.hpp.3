.TH "src/tests/locking/locking_tests.hpp" 3 "Version 0.1" "shmemvv" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/tests/locking/locking_tests.hpp \- Contains function declarations for the OpenSHMEM distributed locking tests\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'routines\&.hpp'\fP
.br
\fR#include <shmem\&.h>\fP
.br
\fR#include <iostream>\fP
.br
\fR#include <cstdlib>\fP
.br
\fR#include <cstring>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBtest_shmem_lock_unlock\fP (void)"
.br
.RI "Tests the shmem_set_lock() and shmem_clear_lock() routines\&. "
.in -1c
.SH "Detailed Description"
.PP 
Contains function declarations for the OpenSHMEM distributed locking tests\&. 


.PP
Definition in file \fBlocking_tests\&.hpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "bool test_shmem_lock_unlock (void )"

.PP
Tests the shmem_set_lock() and shmem_clear_lock() routines\&. This test verifies that the shmem_set_lock() and shmem_clear_lock() routines correctly set and clear a distributed lock\&. It ensures that the lock is properly set by one PE and the state is correctly observed by another PE\&.
.PP
\fBReturns\fP
.RS 4
True if the test is successful, false otherwise\&. 
.RE
.PP

.PP
Definition at line \fB17\fP of file \fBlocking_tests\&.cpp\fP\&.
.nf
17                                   {
18   long *lock = (long *)p_shmem_malloc(sizeof(long));
19   *lock = 0;
20   int mype = p_shmem_my_pe();
21   bool result = true;
22 
23   p_shmem_barrier_all();
24 
25   if (mype == 0) {
26     p_shmem_set_lock(lock);
27     *lock = 1;
28     p_shmem_clear_lock(lock);
29   }
30 
31   p_shmem_barrier_all();
32 
33   if (mype == 1) {
34     p_shmem_set_lock(lock);
35     if (*lock != 1) {
36       result = false;
37     }
38     p_shmem_clear_lock(lock);
39   }
40 
41   p_shmem_barrier_all();
42 
43   p_shmem_free(lock);
44   return result;
45 }
.PP
.fi

.PP
References \fBp_shmem_barrier_all\fP, \fBp_shmem_clear_lock\fP, \fBp_shmem_free\fP, \fBp_shmem_malloc\fP, \fBp_shmem_my_pe\fP, and \fBp_shmem_set_lock\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for shmemvv from the source code\&.
